我準備的刷題方式
是把leetcode的study plan先寫完
然後每天寫daily
並且按照這個網站刷https://neetcode.io/


寫題目的時候
如果10分鐘內想不到最佳解(包含時間複雜度)
就可以直接找答案來看
並且把解法學起來


每題寫完的題目 也要去看看別人是怎麼解的
即使原本不用看解答也能寫對
並且把程式優化，修到最好的版本


要練習到每一題都要在第一時間想到最佳解
並且一次寫就能寫對的程度


面試當下如果說不出夠好的解法
面試官也不會讓你開始寫


可以練習用run確認有沒有compiler 問題
確認沒問題之後直接submit
然後要一次對


hard的題目也一定要寫
因為真的有可能問到這麼難


各種題目題型都要刷(dp, bs, graph, array, …….)
各種特殊演算法也都要會(union, trie, …)


Google面試重視的是能不能想出夠好的解法
並且在接近0失誤的情況下完成
還要能夠驗證正確性，清晰的解釋給面試官聽
以上全部要在45分鐘內完成


所以在平常刷題時候要盡量要求自己寫題能表現到完美


- - -


刷題的時候，每100題都是一個坎


基礎建立時期：
0~100是程式基本資料結構和演算法的建立，熟悉基本語法
100~200會接觸到簡單演算法的模板(DFS, BFS, BS, DP……)


題型熟悉時期：
200~300開始會接觸特殊演算法
這時候會自以為有點小成
但是有些題目還是會卡超久都想不到
才發現有些演算法根本想不到


300-400會開始熟悉所有題型
這時候會開始接觸各種題型的hard
並且熟悉每種題型的解法
開始練習看到題目就要知道該怎麼解
(有些題目跟你說解法，你還是不知道怎麼解)
(蛤？為什麼這題是Binary search?) -> 最常見
(這題dp條件要怎麼更新？)


解法優化時期：
400之後，9成以上的題目都難不倒你
medium 即使沒看過，基本也都能秒殺
hard題型如果遇過，也都能在1小時內寫完


這時候會開始優化解法
不只要寫對，還要寫的美，寫得漂亮


之後累積題目的速度就會變很快
也很容易寫到以前寫過的題目
可以看一下自己青澀時期的寫法
並且重寫一次，讓現在的自己把他修得更美